#+TITLE: SET09103 Advanced Web Technologies 2021/22 - Part 2

* Site Location
The application is hosted on the assigned virtual machine (webtech-07) using apache2 and gunicorn. It is available to view at: http://webtech-07.napier.ac.uk:5000/. A dotenv file has been placed in the root of the project, as well as various AWS defaults inside the user directory. These are operation requirements for the TTS service.

* Difference between plan and implementation
Inevitably, Notecast has diverged from its intended, and original, trajectory. This is expected with all technical projects, as predicting the outcome for every possible facet of an idea is impractical and unfeasible. Despite this, Notecast, broadly speaking, fulfils its purpose as a text-to-speech synthesiser and note collation service.

The first difference relates to terminology. In the planning phase, "notecasts" were referred to as "podcasts". This has been revised for a better sense of the product and brand.

In addition to the change of terminology, the grid-like design style has been substituted with a row-based interface. This row-based layout aims to reproduce the familiarities of audio-centric apps like Spotify and Soundcloud. This approach has favoured simplicity and functionality over user agency or freedom. It also proved to be less convoluted during the development phase. Consequently, the site presents as a more traditional podcast service, as opposed to the collaborative board it initially intended to be. For much the same reasons, the comment section and social aspects have also been omitted.

Early research favoured the use of Microsoft's Azure streaming service for speech synthesis. Instead, the decision was made to request a .mp3 file from the endpoint and store it in an S3 bucket. Internally the webserver persists a path for each audio file against its respective notecast. This is an improvement on the streaming service. Not only is the system less expensive in terms of compute, but it also betters the accessibility of the site. Such a feature could be extended in future to allow for offline capabilities or file downloads (users have more autonomy/ownership).

The final implementation does not include Flask-SQLAlchemy as a dependency. Due to the relatively simple nature of the project, raw SQL queries suffice. The MVC application structure originally cited has been applied, bar a small caveat. The "view" layer is not literally named so in the codebase but instead resides in a "templates" directory. This is to ensure parity with Flask's default templating engine, Jinja.

It was originally suggested that Vim would be used due to its compatibility with Linux. Instead, I ended up developing the application locally, using Emacs. With the help of version control, I was able to push changes using standard commit conventions, then clone the whole application on the VM once complete. This workflow proved to be more efficient.

* Potential enhancements
There are many potential enhancements that could be made to Notecast. One of the foremost and pressing concerns is testing. The current implementation lacks sufficient test coverage. No effort has been made to create unit tests, and this hurts both maintainability and reliability. Such a performance-critical enhancement would be integral to the further success of the platform.

With the advent of testing, a CI/CD pipeline could be developed, possible on GitHub actions (as that is where the repository is currently stored). This would allow for automatic testing, ensuring that only passing builds are deployed to the virtual machine.

Whilst I only prefer to sprinkle on the odd JavaScript when required, the value that some JS frameworks introduce cannot be ignored. The application already involves some reactivity. A potential enhancement could be to integrate a framework like Svelte or Vue to help handle the internal state if the feature set or complexity increases.

For the sake of privacy concerns, it would be nice to implement a "Delete account" button, or data download option. This would be relatively easy to achieve and greatly enhance user satisfaction. Some profile customisations would be a great touch, too.

The beauty of Flask lies in its straightforwardness. I do feel, however, the project could benefit from better design. Inspiration could be taken from well-devised frameworks such as Elixir's Phoenix. Alternatively, the whole project could be migrated to a more sophisticated Python framework such as Django. And, whilst raw SQL queries are powerful when used correctly, the developer experience could be advanced through the use of an ORM such as Flask-SQLAlchemy.

A more user-facing or user-focused enhancement could involve multi-lingual voice support. Microsoft's APIs definitely have the capacity to achieve this as it is advertised on their promotional site.

* Challenges faced
Various challenges arose during the development of Notecast. One of these challenges involved the naming of files. I wanted to avoid duplicate writes for the S3 bucket, and it was not immediately obvious which approach to take. A solution that first sprang to mind involved naming audio files based on their notecast ID value. In theory, this would work. IDs are always unique and automatically increment. However, what happens when the database is re-initialised, or some form of migration occurs? Unless manually cleared, the .mp3 files would remain on the S3 bucket and conflict with new notecasts. Whilst it is probably wise to purge redundant files from S3 (to mitigate costs), I wanted to eliminate the possibility of an application crash altogether. To resolve this issue, I ended up leveraging a UUID library in order to generate unique values (as far as possible). Considering the size of Notecast, a UUID conflict should realistically never occur.

An additional challenge related to Microsoft's Azure package. I quickly realised that a notecast "script" could quite easily exceed the account quota and accumulate a considerable bill. This problem came to my attention when I accidentally pasted a large amount of text into the input field on the cast creation screen.

Finally, I found the application of raw SQL queries to be cumbersome at times. Perhaps I created an unnecessary amount of difficulty in this area, as an ORM could have been employed to make interfacing with the database and schema smoother. Some of my favourite ORMs include Gorm (for Golang) and Ecto (for Elixir). A Python alternative to either of these ORMs would be ideal for the project.
